import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Create an API using Redux Toolkit's `createApi` function
export const api = createApi({
  // Set the base query to use the `fetchBaseQuery` function with a baseUrl from the environment variables
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.REACT_APP_BASE_URL,
  }),

  // Set a name for the slice of state that will be created for this API
  reducerPath: "adminApi",

  // Define an array of tag types that can be used to invalidate queries
  tagTypes: [
    "User",
    "Products",
    "Customers",
    "Transactions",
    "Sales",
    "Admins",
    "Performance",
    "Dashboard",
  ],

  // Define endpoints using the `build` object
  endpoints: (build) => ({
    // Define an endpoint to get a user by ID
    getUser: build.query({
      query: (id) => `general/user/${id}`,

      // Provide tags to use for caching and invalidation
      providesTags: ["User"],
    }),

    // Define an endpoint to get a list of products
    getProducts: build.query({
      query: () => "client/products",
      providesTags: ["Products"],
    }),

    // Define an endpoint to get a list of customers
    getCustomers: build.query({
      query: () => "client/customers",
      providesTags: ["Customers"],
    }),

    // Define an endpoint to get a paginated list of transactions
    getTransactions: build.query({
      query: ({ page, pageSize, sort, search }) => ({
        url: "client/transactions",
        method: "GET",
        params: { page, pageSize, sort, search },
      }),
      providesTags: ["Transactions"],
    }),

    // Define an endpoint to get a list of geography data
    getGeography: build.query({
      query: () => "client/geography",
      providesTags: ["Geography"],
    }),

    // Define an endpoint to get a list of sales data
    getSales: build.query({
      query: () => "sales/sales",
      providesTags: ["Sales"],
    }),

    // Define an endpoint to get a list of admins
    getAdmins: build.query({
      query: () => "management/admins",
      providesTags: ["Admins"],
    }),

    // Define an endpoint to get performance data for a user
    getUserPerformance: build.query({
      query: (id) => `management/performance/${id}`,
      providesTags: ["Performance"],
    }),

    // Define an endpoint to get dashboard data
    getDashboard: build.query({
      query: () => "general/dashboard",
      providesTags: ["Dashboard"],
    }),
  }),
});

// Export hooks generated by the `createApi` function for each endpoint
export const {
  useGetUserQuery,
  useGetProductsQuery,
  useGetCustomersQuery,
  useGetTransactionsQuery,
  useGetGeographyQuery,
  useGetSalesQuery,
  useGetAdminsQuery,
  useGetUserPerformanceQuery,
  useGetDashboardQuery,
} = api;
